@page "/"
@using PlantillaComponents.Components.Button
@using PlantillaComponents.Components.CardSelectableGroup
@using PlantillaComponents.Components.CheckboxField
@using PlantillaComponents.Components.DatePickerField
@using PlantillaComponents.Components.DropDownField
@using PlantillaComponents.Components.NumberField
@using PlantillaComponents.Components.QueryTable
@using PlantillaComponents.Components.Table
@using PlantillaComponents.Components.ThemeToggle
@using System.ComponentModel.DataAnnotations
@using PlantillaComponents.Models
@using static PlantillaComponents.Components.DropDownField.DropDownField

<div class="h-full overflow-y-auto">
    <ThemeToggle />


    <!--


    <div class="mx-6 mt-6 px-6">
    <QueryTable TItem="Cliente"
    Titulo="Lista de Clientes"
    Elementos="@clientes"
    TamanoPagina="5"
    AlEliminarMasivo="EliminarSeleccionados"
    BusquedaHabilitada="true"
    Ordenable="true"
    AccesorEstado="Estado"
    EtiquetaNoEncontrado="No se encontraron clientes"
    Cargando="@loading"
    AlSeleccionar="HandleSelectAction"
    AlEliminar="HandleDeleteAction"
    AlNuevo="HandleNewAction"
    AlCambiarEstado="HandleStatus"
    Columnas="@definicionColumnas">

    <FilaExpandida Context="cliente">
    <QueryTable TItem="Cliente"
    Elementos="@clientes"
    Titulo="Lista de Clientes Hijos"
    MostrarOpciones="true"
    Ordenable="true"
    BusquedaHabilitada="true"
    AccesorEstado="Estado"
    AlCambiarEstado="CambiarEstadoCliente"
    AlSeleccionar="SeleccionarCliente"
    AlEliminar="EliminarCliente"
    AlNuevo="NuevoCliente"
    AlEliminarMasivo="EliminarVariosClientes"
    Columnas="definicionColumnas">
    </QueryTable>
    </FilaExpandida>

    </QueryTable>

    </div>

    -->


    <div class="mx-6 mt-6 px-6">
        <QueryTable TItem="Cliente"
        Titulo="Lista de Clientes"
        Elementos="@clientes"
        TamanoPagina="5"
        AlEliminarMasivo="EliminarSeleccionados"
        BusquedaHabilitada="true"
        Ordenable="true"
        AccesorEstado="Estado"
        EtiquetaNoEncontrado="No se encontraron clientes"
        Cargando="@loading"
        AlSeleccionar="HandleSelectAction"
        AlEliminar="HandleDeleteAction"
        AlNuevo="HandleNewAction"
        AlCambiarEstado="HandleStatus"
        Columnas="@definicionColumnas">
        </QueryTable>

    </div>





</div>


@code {
    private DateTime? fechaNacimiento;
    private string? PlanSeleccionado;
    private string? Error;
    public bool AceptaTerminos = true;

    private List<Cliente> clientes = new List<Cliente>();
    private bool loading = true;

    private List<DefinicionColumna<Cliente>> definicionColumnas;

    protected override async Task OnInitializedAsync()
    {

        definicionColumnas = new List<DefinicionColumna<Cliente>>
        {
            new DefinicionColumna<Cliente>
            {
                Encabezado = "ID",
                Registrar = false,
                Accesor = "Id",
                Plantilla = c => c.Id,
                ClaseCss = "text-center",
                PermitirOrdenamiento = true,
                Editable = false,
                Requerido = true,
                PatronRegex = @"^\d+$",
                MensajeError = "El ID debe ser un número entero.",
                TipoInput = "number",
                Min = "1",
                Max = null,
                Step = "1",
                FormatoFecha = null,
                FormatoNumero = "N0"
            },
            new DefinicionColumna<Cliente>
            {
                Encabezado = "Nombre",
                Accesor = "Nombre",
                Registrar = true,
                Plantilla = c => c.Nombre,
                ClaseCss = "text-left",
                PermitirOrdenamiento = true,
                Editable = false,
                Requerido = true,
                PatronRegex = @"^[a-zA-Z\sáéíóúÁÉÍÓÚñÑ]+$",
                MensajeError = "El nombre solo puede contener letras y espacios.",
                TipoInput = "text",
                FormatoNumero = null
            },
            new DefinicionColumna<Cliente>
            {
                Encabezado = "Email",
                Accesor = "Email",
                Registrar = true,
                Plantilla = c => c.Email,
                ClaseCss = "text-left",
                PermitirOrdenamiento = true,
                Editable = true,
                Requerido = true,
                PatronRegex = @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
                MensajeError = "Debe ser un correo electrónico válido.",
                TipoInput = "email"
            },
            new DefinicionColumna<Cliente>
            {
                Encabezado = "Tipo Cliente",
                Accesor = "TipoCliente",
                Registrar = true,
                Plantilla = c => c.TipoCliente,
                ClaseCss = "text-center",
                PermitirOrdenamiento = true,
                Editable = true,
                Requerido = true,
                TipoInput = "select",
                OpcionesSelect = new List<SelectOption>
                {
                    new SelectOption { Value = "Regular", Text = "Regular" },
                    new SelectOption { Value = "VIP", Text = "VIP" },
                    new SelectOption { Value = "Premium", Text= "Premium" }
                }
            },
            new DefinicionColumna<Cliente>
            {
                Encabezado = "Estado",
                Registrar = false,
                Accesor = "Estado",
                Plantilla = c => c.Estado,
                ClaseCss = "text-center",
                PermitirOrdenamiento = true,
                Editable = true,
                Requerido = false,
                TipoInput = "select",
                OpcionesSelect = new List<SelectOption>
                {
                    new SelectOption { Value = "A", Text = "Activo" },
                    new SelectOption { Value = "I", Text = "Inactivo" }
                }
            }
        };



        clientes = new List<Cliente>
            {
            new Cliente { Id = 1, Nombre = "Juan Pérez", Email = "juan@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 2, Nombre = "Ana Gómez", Email = "ana@ejemplo.com", TipoCliente = "VIP", Estado = "I" },
            new Cliente { Id = 3, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 4, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 5, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 6, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 7, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 8, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 9, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 10, Nombre = "Juan Pérez", Email = "juan@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 11, Nombre = "Ana Gómez", Email = "ana@ejemplo.com", TipoCliente = "VIP", Estado = "I" },
            new Cliente { Id = 12, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 13, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 14, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 15, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 16, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 17, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" },
            new Cliente { Id = 18, Nombre = "Carlos Sánchez", Email = "carlos@ejemplo.com", TipoCliente = "Regular", Estado = "A" }
            };
        loading = false;
    }

    private async Task CambiarEstadoCliente(Cliente cliente)
    {
        try
        {
            cliente.Estado = cliente.Estado == "A" ? "I" : "A";

        }
        catch (Exception ex)
        {

        }
    }

    private void CambiarEstadoCliente((Cliente cliente, string status) datos)
    {
        Console.WriteLine($"El estado del cliente {datos.cliente.Nombre} cambió a {datos.status}");
    }


    private async Task SeleccionarCliente(Cliente cliente)
    {
        Console.WriteLine(cliente.Nombre);
    }

    private async Task EliminarCliente(Cliente cliente)
    {
        try
        {
            clientes.Remove(cliente);
            Console.WriteLine(cliente.Nombre);
        }
        catch (Exception ex)
        {
            Console.WriteLine(cliente.Nombre);
        }
    }

    private async Task EliminarVariosClientes(List<Cliente> clientesSeleccionados)
    {
        try
        {
            foreach (var cliente in clientesSeleccionados.ToList())
            {
                clientes.Remove(cliente);
            }

        }
        catch (Exception ex)
        {

        }
    }

    private void NuevoCliente()
    {
        Console.WriteLine("Nuevo Cliente");
    }

    private async Task GuardarCambios(Cliente cliente)
    {
        try
        {
            Console.WriteLine(cliente.Nombre);

        }
        catch (Exception ex)
        {
            Console.WriteLine(cliente.Nombre);

        }
    }

    private async Task<bool> ValidarCliente(Cliente cliente)
    {
        // Validación personalizada adicional a las reglas definidas
        if (string.IsNullOrEmpty(cliente.Email) && string.IsNullOrEmpty(cliente.Email))
        {
            Console.WriteLine(cliente.Nombre);

            return false;
        }

        // Ejemplo de validación basada en lógica de negocios
        if (cliente.TipoCliente == "3")
        {
            Console.WriteLine(cliente.Nombre);
            return false;
        }

        return true;
    }


    private async Task EliminarSeleccionados(List<Cliente> seleccionados)
    {
        foreach (var cliente in seleccionados)
        {
            Console.WriteLine($"Cliente eliminado {cliente.Nombre}");
            clientes.Remove(cliente);
        }
    }

    private void HandleStatus((Cliente cliente, string status) datos)
    {
        Console.WriteLine($"El estado del cliente {datos.cliente.Nombre} cambió a {datos.status}");
    }


    private void HandleSelectAction(Cliente cliente)
    {
        // Lógica para editar un cliente
        Console.WriteLine($"Editar cliente {cliente.ToString()} Editar");
    }

    private void HandleDeleteAction(Cliente cliente)
    {

        clientes.Remove(cliente);

        // Lógica para eliminar un cliente
        Console.WriteLine($"Eliminar cliente {cliente.Nombre}");
    }

    private void HandleNewAction(Cliente cliente)
    {
        cliente.Estado = "A";

        clientes.Add(cliente);

        Console.WriteLine($"Agregar nuevo cliente {cliente.ToString()}");
    }

}
