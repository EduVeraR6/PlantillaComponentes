@using System.Text.Json
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Reflection
@using System.Linq.Expressions
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ILogger<QueryTable<TItem>> Logger

@typeparam TItem where TItem : class

<div class="flex flex-col @TableClassName">
    <!-- Header with search and add button -->
    <div class="flex flex-wrap justify-between items-center mb-4 px-4 py-2 bg-[var(--bg)] border-b border-[var(--border)] rounded-t-lg">
        <p class="text-lg font-bold text-[var(--font)] break-words">@Title</p>

        <div class="flex items-center space-x-2 w-full sm:w-auto mt-2 sm:mt-0">
            @if (Searchable)
            {
                <div class="relative flex items-center border border-[var(--border)] rounded bg-[var(--bg)] focus-within:ring focus-within:border-[var(--highlight)]">
                    <span class="px-3 text-[var(--placeholder)]">
                        <i class="fas fa-filter"></i>
                    </span>
                    <input type="text" 
                           value="@GlobalFilter" 
                           @oninput="HandleGlobalFilterChange" 
                           placeholder="@SearchPlaceholder" 
                           class="flex-1 p-2 bg-transparent text-[var(--font)] placeholder-[var(--placeholder)] focus:outline-none w-[25%]" />
                    @if (!string.IsNullOrEmpty(GlobalFilter))
                    {
                        <button type="button" 
                                @onclick="ClearGlobalFilter" 
                                class="absolute right-2 text-[var(--placeholder)] hover:text-[var(--font)] focus:outline-none">
                            <i class="fas fa-times"></i>
                        </button>
                    }
                </div>
            }

            @if (OnNewAction.HasDelegate)
            {
                <button type="button" @onclick="OnNewAction" class="p-3 bg-[var(--info)] text-white rounded hover:bg-blue-400">
                    <i class="fas fa-plus"></i>
                </button>
            }
        </div>
    </div>

    <!-- Table with scroll horizontal -->
    <div class="overflow-x-auto rounded-xl border border-[var(--border)] shadow-md">
        <table class="min-w-full bg-[var(--bg)] text-[var(--font)] text-left">
            <thead class="border-b bg-[var(--secondaryalt)] text-[var(--font)]">
                <tr>
                    @if (RowExpand != null)
                    {
                        <th class="px-4 py-4 text-sm font-medium border-[var(--border)]"></th>
                    }
                    @if (OnDeleteMassiveAction.HasDelegate)
                    {
                        <th class="px-4 py-3 text-sm font-semibold border-[var(--border)] whitespace-nowrap w-[1%]">
                            <div class="flex">
                                <button type="button" 
                                        @onclick="() => ShowMassDeleteConfirmation = true" 
                                        class="p-1 rounded-md text-[var(--error)] hover:text-red-600 @(SelectedRows.Count == 0 ? "opacity-50 cursor-not-allowed" : "")" 
                                        title="Eliminar seleccionados" 
                                        disabled="@(SelectedRows.Count == 0)">
                                    <i class="fas fa-trash-alt text-lg"></i>
                                </button>
                            </div>
                        </th>
                    }
                    @if (OnSelectAction.HasDelegate || OnDeleteAction.HasDelegate)
                    {
                        <th class="px-4 py-3 text-sm font-semibold border-[var(--border)] whitespace-nowrap w-[10%]">
                            <div class="flex items-center justify-center">Acciones</div>
                        </th>
                    }
                    @foreach (var column in Columns)
                    {
                        <th class="px-4 py-3 text-sm font-semibold border-[var(--border)] whitespace-nowrap @(column.ClassName ?? "")">
                            <div class="group flex justify-center items-center space-x-2">
                                @column.Header
                                @if (Sortable && column.EnableSorting != false)
                                {
                                    <div class="flex flex-col">
                                        <i class="fas fa-chevron-up cursor-pointer text-xs ml-2 text-[var(--font)] hover:text-[var(--disabled)]"
                                           @onclick='() => HandleSort(column.Accessor, "asc")'></i>
                                        <i class="fas fa-chevron-down -mt-[3px] cursor-pointer text-xs ml-2 text-[var(--font)] hover:text-[var(--disabled)]"
                                           @onclick='() => HandleSort(column.Accessor, "desc")'></i>
                                    </div>

                                }
                            </div>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (Error)
                {
                    <tr class="border-b border-[var(--border)]">
                        <td colspan="@GetColumnCount()" class="text-center py-4 text-[var(--error)] font-medium">
                            Ocurrió un error al obtener la data.
                        </td>
                    </tr>
                }
                else if (Loading)
                {
                    <tr class="border-b border-[var(--border)]">
                        <td colspan="@GetColumnCount()" class="text-center py-4">
                            <div class="inline-block animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-[var(--secondary)]"></div>
                        </td>
                    </tr>
                }
                else if (Data == null || Data.Count == 0)
                {
                    <tr class="border-b border-[var(--border)]">
                        <td colspan="@GetColumnCount()" class="text-center py-4 text-[var(--font)] font-medium">
                            @NotFoundLabel
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var item in Data)
                    {
                        var rowId = item.GetHashCode().ToString();
                        <tr class="border-b border-[var(--border)] text-center hover:bg-[var(--secondaryalthover)] transition duration-200">
                            @if (RowExpand != null)
                            {
                                <td class="whitespace-nowrap px-2 py-4 text-sm font-light border-[var(--border)]">
                                    <button type="button" 
                                            @onclick="() => ToggleRowExpansion(rowId, item)" 
                                            class="focus:outline-none transition-transform duration-300 flex items-center justify-center
                                                @(DisableRowExpand != null && DisableRowExpand(item) 
                                                    ? "cursor-not-allowed text-[var(--disabled)] opacity-50" 
                                                    : "cursor-pointer hover:text-[var(--hover)]")" 
                                            disabled="@(DisableRowExpand != null && DisableRowExpand(item))">
                                        <span class="inline-block transition-transform duration-300 @(ExpandedRows.ContainsKey(rowId) && ExpandedRows[rowId] ? "rotate-90" : "rotate-0")">
                                            <i class="fas fa-chevron-right"></i>
                                        </span>
                                    </button>
                                </td>
                            }
                            @if (OnDeleteMassiveAction.HasDelegate)
                            {
                                <td class="px-6 py-4 text-sm font-light border-[var(--border)] whitespace-nowrap w-[1%]">
                                    <input type="checkbox" 
                                           class="accent-border-dark" 
                                           checked="@(SelectedRows.Contains(item))" 
                                           @onchange="() => HandleRowSelection(item)" />
                                </td>
                            }
                            @if (OnSelectAction.HasDelegate || OnDeleteAction.HasDelegate)
                            {
                                <td class="px-6 py-4 text-sm font-light border-[var(--border)] whitespace-nowrap w-[10%]">
                                    <div class="flex items-center justify-center space-x-2 relative">
                                        @if (OnSelectAction.HasDelegate)
                                        {
                                            <button type="button" 
                                                    @onclick="() => OnSelectAction.InvokeAsync(item)" 
                                                    class="text-blue-500 hover:text-[var(--info)]" 
                                                    title="Editar">
                                                <i class="fas fa-edit text-lg"></i>
                                            </button>
                                        }
                                        @if (OnDeleteAction.HasDelegate)
                                        {
                                            <button type="button" 
                                                    @onclick="(e) => HandleDeleteClick(item, e)" 
                                                    class="text-red-500 hover:text-[var(--error)]" 
                                                    title="Eliminar">
                                                <i class="fas fa-trash-alt text-lg"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            }
                            @foreach (var column in Columns)
                            {
                                var whitespaceClass = column.ClassName?.Contains("whitespace-normal") == true ? "" : "whitespace-nowrap";
                                
                                @if (StatusAccessor != null && column.Accessor == StatusAccessor)
                                {
                                    var status = GetPropertyValue(item, StatusAccessor)?.ToString();
                                    
                                    <td class="px-6 py-4 text-sm font-light border-[var(--border)] @whitespaceClass @(column.ClassName ?? "")">
                                        <div class="flex items-center justify-center">
                                            <Toggle IsActive="@(status == "A")" OnToggle="() => HandleStatusToggle(item)" />
                                        </div>
                                    </td>
                                }
                                else
                                {
                                    <td class="px-6 py-4 text-sm font-light border-[var(--border)] @whitespaceClass @(column.ClassName ?? "")">
                                        @GetCellValue(item, column)
                                    </td>
                                }
                            }
                        </tr>
                        @if (RowExpand != null && ExpandedRows.ContainsKey(rowId) && ExpandedRows[rowId])
                        {
                            <tr class="border-b">
                                <td colspan="@GetColumnCount()" class="p-4 text-left bg-[var(--bg)] relative">
                                    <div class="absolute left-4 top-0 bottom-0 w-0.5 bg-[var(--border)]"></div>
                                    <div class="ml-8">
                                        @RowExpand(item)
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    @if (ShowOptions)
    {
        <div class="flex justify-center items-center mt-4 space-x-2 flex-wrap">
            <!-- Records info -->
            <div class="flex items-center space-x-2 py-2">
                <span class="text-[var(--font)] text-sm text-center md:text-left align-middle">
                    Mostrando del registro @(TotalCount == 0 ? 0 : PageIndex * PageSize + 1) al 
                    @(Math.Min((PageIndex + 1) * PageSize, TotalCount)) de @TotalCount
                </span>
            </div>
            <div>
                <button type="button" 
                        @onclick="NavigateToFirstPage" 
                        disabled="@(PageIndex == 0)" 
                        class="px-3 py-1 bg-[var(--bg)] rounded-md hover:bg-[var(--disabled)] disabled:opacity-50 disabled:cursor-not-allowed">
                    <i class="fas fa-angle-double-left text-[var(--font)]"></i>
                </button>
                <button type="button" 
                        @onclick="NavigateToPrevPage" 
                        disabled="@(PageIndex == 0)" 
                        class="px-3 py-1 bg-[var(--bg)] rounded-md hover:bg-[var(--disabled)] disabled:opacity-50 disabled:cursor-not-allowed">
                    <i class="fas fa-angle-left text-[var(--font)]"></i>
                </button>
                @{
                    int totalPages = (int)Math.Ceiling((double)TotalCount / PageSize);
                    int maxPagesToShow = IsMobile ? 3 : PagesToShow;
                    int startPage = Math.Max(0, PageIndex - maxPagesToShow / 2);
                    int endPage = Math.Min(totalPages - 1, startPage + maxPagesToShow - 1);
                    
                    if (endPage - startPage < maxPagesToShow - 1)
                    {
                        startPage = Math.Max(0, endPage - maxPagesToShow + 1);
                    }
                }
                
                @for (int page = startPage; page <= endPage; page++)
                {
                    var currentPage = page;
                    <button type="button" 
                            @onclick="() => NavigateToPage(currentPage)" 
                            class="px-3 py-1 rounded-md text-[var(--font)] @(currentPage == PageIndex ? "bg-[var(--secondaryalt)]" : "bg-[var(--bg)] hover:bg-[var(--disabled)]")">
                        @(currentPage + 1)
                    </button>
                }
                <button type="button" 
                        @onclick="NavigateToNextPage" 
                        disabled="@(PageIndex == totalPages - 1)" 
                        class="px-3 py-1 bg-[var(--bg)] rounded-md hover:bg-[var(--disabled)] disabled:opacity-50 disabled:cursor-not-allowed">
                    <i class="fas fa-angle-right text-[var(--font)]"></i>
                </button>
                <button type="button" 
                        @onclick="() => NavigateToPage(totalPages - 1)" 
                        disabled="@(PageIndex == totalPages - 1)" 
                        class="px-3 py-1 bg-[var(--bg)] rounded-md hover:bg-[var(--disabled)] disabled:opacity-50 disabled:cursor-not-allowed">
                    <i class="fas fa-angle-double-right text-[var(--font)]"></i>
                </button>
            </div>
            <select value="@PageSize" 
                    @onchange="HandlePageSizeChange" 
                    class="ml-2 p-2 bg-[var(--secondaryalt)] text-[var(--font)] rounded md:mt-0 mt-3">
                <option value="5" class="hover:bg-[var(--secondaryalthover)]">Mostrar 5</option>
                <option value="10" class="hover:bg-[var(--secondaryalthover)]">Mostrar 10</option>
                <option value="20" class="hover:bg-[var(--secondaryalthover)]">Mostrar 20</option>
            </select>
        </div>
    }

    <!-- Delete confirmation overlay -->
    @if (OverlayData != null)
    {
        <div class="fixed z-50 bg-[var(--bg)] border border-[var(--border)] rounded shadow-lg p-4"
             style="top: @(OverlayPosition.Top)px; left: @(OverlayPosition.Left)px; transform: translateX(-50%);">
            <div class="flex items-center space-x-2">
                <i class="fas fa-exclamation-triangle text-[var(--error)] text-xl"></i>
                <p class="text-sm text-[var(--font)]">¿Estás seguro de eliminar este elemento?</p>
            </div>
            <div class="flex justify-end space-x-4 mt-4">
                <button type="button" @onclick="ConfirmDelete" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                    Sí
                </button>
                <button type="button" @onclick="CancelDelete" class="px-4 py-2 border border-[var(--border)] text-[var(--font)] rounded">
                    No
                </button>
            </div>
        </div>
    }

    <!-- Mass delete confirmation modal -->
    @if (ShowMassDeleteConfirmation)
    {
        <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
            <div class="bg-[var(--bg)] border border-[var(--border)] rounded-lg shadow-lg p-6 w-[90%] sm:w-[400px] max-w-full">
                <div class="flex items-center space-x-2">
                    <i class="fas fa-exclamation-triangle text-[var(--error)] text-2xl"></i>
                    <p class="text-md text-[var(--font)]">¿Estás seguro de eliminar los elementos seleccionados?</p>
                </div>

                <div class="flex flex-wrap justify-end space-x-2 sm:space-x-4 mt-6">
                    <button type="button" @onclick="ConfirmMassDelete" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                        Sí
                    </button>
                    <button type="button" @onclick="() => ShowMassDeleteConfirmation = false" class="px-4 py-2 border border-[var(--border)] text-[var(--font)] rounded">
                        No
                    </button>
                </div>
            </div>
        </div>
    }
</div>
