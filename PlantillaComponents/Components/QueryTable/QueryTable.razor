@using System.Text.Json
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Reflection
@using System.Linq.Expressions
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@using System.Text.RegularExpressions
@using PlantillaComponents.Components.InputDinamico
@using PlantillaComponents.Components.Paginacion
@using PlantillaComponents.Components.Toggle
@inject IJSRuntime JS
@inject HttpClient Http
@inject ILogger<QueryTable<TItem>> Logger

@typeparam TItem where TItem : class

<div class="flex flex-col @ClaseTabla">
    <!-- Header with search and add button -->
    <div class="flex flex-wrap justify-between items-center mb-4 px-4 py-2 bg-[var(--bg)] border-b border-[var(--border)] rounded-t-lg">
        <p class="text-lg font-bold text-[var(--font)] break-words">@Titulo</p>

        <div class="flex items-center space-x-2 w-full sm:w-auto mt-2 sm:mt-0">
            @if (BusquedaHabilitada)
            {
                <div class="relative flex items-center border border-[var(--border)] rounded bg-[var(--bg)] focus-within:ring focus-within:border-[var(--highlight)]">
                    <span class="px-3 text-[var(--placeholder)]">
                        <i class="fas fa-filter"></i>
                    </span>
                    <input type="text"
                           value="@FiltroGlobal"
                           @oninput="CambiarFiltroGlobal"
                           disabled="@AccionEnProceso"
                           placeholder="@PlaceholderBusqueda"
                           class="flex-1 p-2 bg-transparent text-[var(--font)] placeholder-[var(--placeholder)] focus:outline-none w-[25%]" />
                    @if (!string.IsNullOrEmpty(FiltroGlobal))
                    {
                        <button type="button"
                                @onclick="LimpiarFiltroGlobal"
                                disabled="@AccionEnProceso"
                                class="absolute right-2 text-[var(--placeholder)] hover:text-[var(--font)] focus:outline-none">
                            <i class="fas fa-times"></i>
                        </button>
                    }
                </div>
            }

            <button type="button"
                    @onclick="IniciarNuevoRegistro"
                    class="w-9 h-9 flex items-center justify-center @(AccionEnProceso ? "bg-gray-400 cursor-not-allowed" : "bg-[var(--info)] hover:bg-blue-400") text-white rounded"
                    disabled="@AccionEnProceso">
                <i class="fas fa-plus text-sm"></i>
            </button>
        </div>
    </div>

    <!-- Table with scroll horizontal -->
    <div class="overflow-x-auto rounded-xl border border-[var(--border)] shadow-md">
        <table class="min-w-full bg-[var(--bg)] text-[var(--font)] text-center">
            <thead class="border-b bg-[var(--secondaryalt)] text-[var(--font)]">
                <tr>
                    @if (FilaExpandida != null)
                    {
                        <th class="px-4 py-4 text-sm font-medium border-[var(--border)]"></th>
                    }
                    @if (AlEliminarMasivo.HasDelegate)
                    {
                        <th class="px-4 py-3 text-sm font-semibold border-[var(--border)] whitespace-nowrap w-[1%]">
                            <div class="flex">
                                <button type="button"
                                        @onclick="() => MostrarConfirmacionEliminarMasivo = true"
                                        class="p-1 rounded-md text-[var(--error)] hover:text-red-600 @(FilasSeleccionadas.Count == 0 ? "opacity-50 cursor-not-allowed" : "")"
                                        title="Eliminar seleccionados"
                                        disabled="@(FilasSeleccionadas.Count == 0 || AccionEnProceso)">
                                    <i class="fas fa-trash-alt text-lg"></i>
                                </button>
                            </div>
                        </th>
                    }
                    @if (AlSeleccionar.HasDelegate || AlEliminar.HasDelegate || AlNuevo.HasDelegate)
                    {
                        <th class="px-4 py-3 text-sm font-semibold border-[var(--border)] whitespace-nowrap w-[10%]">
                            <div class="flex items-center justify-center">Acciones</div>
                        </th>
                    }
                    @foreach (var column in Columnas)
                    {
                        <th class="px-4 py-3 text-sm font-semibold border-[var(--border)] whitespace-nowrap @(column.ClaseCss ?? "")">
                            <div class="group flex justify-center items-center space-x-2 gap-4">
                                @column.Encabezado
                                @if (Ordenable && column.PermitirOrdenamiento != false)
                                {
                                    <button type="button" @onclick="() => OrdenarColumna(column.Accesor)">
                                        <i class="fas fa-sort @(columnaOrdenada == column.Accesor ? (ordenAscendente ? "fa-solid fa-sort-up" : "fa-solid fa-sort-down") : "")"></i>
                                    </button>
                                }
                            </div>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (MostrarNuevoRegistro)
                {
                    <tr class="border-b border-[var(--border)] text-center bg-[var(--secondaryalthover)]">
                        @if (FilaExpandida != null)
                        {
                            <td class="whitespace-nowrap px-2 py-4 text-sm text-center font-light border-[var(--border)]"></td>
                        }
                        @if (AlEliminarMasivo.HasDelegate)
                        {
                            <td class="px-4 py-3 text-sm text-center font-light border-[var(--border)] whitespace-nowrap w-[1%]"></td>
                        }
                        @if (AlSeleccionar.HasDelegate || AlEliminar.HasDelegate || AlNuevo.HasDelegate)
                        {
                            <td class="px-4 py-3 text-sm font-light border-[var(--border)] whitespace-nowrap w-[10%]">
                                <div class="flex items-center justify-center space-x-2 relative">
                                    <button class="text-blue-500 hover:text-[var(--info)]" title="Guardar"
                                            @onclick="GuardarNuevoRegistro">
                                        <i class="fa-solid fa-check text-lg"></i>
                                    </button>
                                    <button class="text-red-500 hover:text-[var(--error)]" title="Cancelar"
                                            @onclick="CancelarNuevoRegistro">
                                        <i class="fa-solid fa-xmark text-lg"></i>
                                    </button>
                                </div>
                            </td>
                        }
                        @foreach (var column in Columnas)
                        {

                            var whitespaceClass = column.ClaseCss?.Contains("whitespace-normal") == true ? "" : "whitespace-nowrap";

                            @if (AccesorEstado != null && column.Accesor == AccesorEstado)
                            {
                                @if (column.Registrar == false)
                                {

                                    <td class="px-4 py-3 text-sm font-light border-[var(--border)] whitespace-nowrap @(column.ClaseCss ?? "")">
                                        <div class="flex items-center justify-center">
                                            <Toggle Disabled="@AccionEnProceso" IsActive="@("A" == "A")" />
                                        </div>
                                    </td>
                                }

                            }
                            else
                            {
                                <td class="px-4 py-3 text-sm font-light border-[var(--border)]  whitespace-nowrap @(column.ClaseCss ?? "")">
                                    <div class="relative">
                                        @if (column.Registrar == true)
                                        {
                                            <InputDinamico TItem="TItem"
                                                           Item="NuevoItem"
                                                           Placeholder="@column.Encabezado"
                                                           Accesor="@column.Accesor"
                                                           TipoInput="@column.TipoInput"
                                                           OpcionesSelect="@column.OpcionesSelect"
                                                           Min="@column.Min"
                                                           Max="@column.Max"
                                                           Step="@column.Step"
                                                           TieneError="@TieneErrorValidacion(NuevoItem, column.Accesor)"
                                                           MensajeError="@ObtenerMensajeError(NuevoItem, column.Accesor)"
                                                           OnInputChange="@((tuple) => RegistrarCambioInput(NuevoItem, tuple.Accesor, tuple.Valor))" />
                                        }
                                        else
                                        {
                                            <span>@ObtenerValorPropiedad(NuevoItem, column.Accesor)</span>
                                        }
                                    </div>
                                </td>

                            }
                        }
                    </tr>
                }

                @if (HayError)
                {
                    <tr class="border-b border-[var(--border)]">
                        <td colspan="@ObtenerCantidadColumnas()" class="text-center py-4 text-[var(--error)] font-medium">
                            Ocurrió un error al obtener la data.
                        </td>
                    </tr>
                }
                else if (Cargando)
                {
                    <tr class="border-b border-[var(--border)]">
                        <td colspan="@ObtenerCantidadColumnas()" class="text-center py-4">
                            <div class="inline-block animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-[var(--secondary)]"></div>
                        </td>
                    </tr>
                }
                else if (ElementosPaginados == null || ElementosPaginados.Count == 0)
                {
                    <tr class="border-b border-[var(--border)]">
                        <td colspan="@ObtenerCantidadColumnas()" class="text-center py-4 text-[var(--font)] font-medium">
                            @EtiquetaNoEncontrado
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var item in ElementosPaginados)
                    {
                        var rowId = item.GetHashCode().ToString();
                        <tr class="border-b border-[var(--border)] text-center hover:bg-[var(--secondaryalthover)] transition duration-200">
                            @if (FilaExpandida != null)
                            {
                                <td class="whitespace-nowrap  px-2 py-4 text-sm font-light border-[var(--border)]">
                                    <button type="button"
                                            @onclick="() => AlternarExpansionFila(rowId, item)"
                                            class="focus:outline-none transition-transform duration-300 flex items-center justify-center
                                                @(DeshabilitarFilaExpandida != null && DeshabilitarFilaExpandida(item) || AccionEnProceso
                                                    ? "cursor-not-allowed text-[var(--disabled)] opacity-50"
                                                    : "cursor-pointer hover:text-[var(--hover)]")"
                                            disabled="@(DeshabilitarFilaExpandida != null && DeshabilitarFilaExpandida(item) || AccionEnProceso)">
                                        <span class="inline-block transition-transform duration-300 @(FilasExpandidas.ContainsKey(rowId) && FilasExpandidas[rowId] ? "rotate-90" : "rotate-0")">
                                            <i class="fas fa-chevron-right"></i>
                                        </span>
                                    </button>
                                </td>
                            }
                            @if (AlEliminarMasivo.HasDelegate)
                            {
                                <td class="px-4 py-3 text-sm font-light border-[var(--border)] whitespace-nowrap w-[1%]">
                                    <input type="checkbox"
                                           class="accent-border-dark"
                                           checked="@(FilasSeleccionadas.Contains(item))"
                                           @onchange="() => SeleccionarFila(item)"
                                           disabled="@AccionEnProceso" />
                                </td>
                            }
                            @if (AlSeleccionar.HasDelegate || AlEliminar.HasDelegate)
                            {
                                <td class="px-4 py-3 text-sm font-light border-[var(--border)] whitespace-nowrap w-[10%]">
                                    <div class="flex items-center justify-center space-x-2 relative">

                                        @if (FilaEnEdicion.ContainsKey(rowId) && FilaEnEdicion[rowId])
                                        {
                                            <button class="text-blue-500 hover:text-[var(--info)]" title="Guardar"
                                                    @onclick="@(() => ValidarYGuardarCambios(item))">
                                                <i class="fa-solid fa-check text-lg"></i>
                                            </button>
                                            <button class="text-red-500 hover:text-[var(--error)]" title="Cancelar"
                                                    @onclick="@(() => CancelarEdicion(rowId))">
                                                <i class="fa-solid fa-xmark text-lg"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            @if (AlSeleccionar.HasDelegate)
                                            {
                                                <button type="button"
                                                        @onclick="() => AlternarEdicionFila(rowId, item)"
                                                        class="text-blue-500 @(AccionEnProceso ? "opacity-50 cursor-not-allowed" : "hover:text-[var(--info)]")"
                                                        title="Editar"
                                                        disabled="@AccionEnProceso">
                                                    <i class="fas fa-edit text-lg"></i>
                                                </button>
                                            }
                                            @if (AlEliminar.HasDelegate)
                                            {
                                                <button type="button"
                                                        id="btnEliminarCliente"
                                                        @onclick="@(() => EliminarElemento(item))"
                                                        class="text-red-500 @(AccionEnProceso ? "opacity-50 cursor-not-allowed" : "hover:text-[var(--error)]")"
                                                        title="Eliminar"
                                                        disabled="@AccionEnProceso">
                                                    <i class="fas fa-trash-alt text-lg"></i>
                                                </button>
                                            }
                                        }

                                    </div>
                                </td>

                            }
                            @foreach (var column in Columnas)
                            {
                                var whitespaceClass = column.ClaseCss?.Contains("whitespace-normal") == true ? "" : "whitespace-nowrap";

                                @if (AccesorEstado != null && column.Accesor == AccesorEstado)
                                {
                                    var status = ObtenerValorPropiedad(item, AccesorEstado)?.ToString();

                                    <td class="px-4 py-3 text-sm font-light border-[var(--border)] @whitespaceClass @(column.ClaseCss ?? "")">
                                        <div class="flex items-center justify-center">
                                            <Toggle Disabled="@AccionEnProceso" IsActive="@(status == "A")" OnToggle="() => CambiarEstado(item)" />
                                        </div>
                                    </td>
                                }
                                else
                                {
                                    <td class="px-4 py-3 text-sm font-light border-[var(--border)] @whitespaceClass @(column.ClaseCss ?? "")">
                                        @if (FilaEnEdicion.ContainsKey(rowId) && FilaEnEdicion[rowId])
                                        {
                                            @if (column.Editable == false)
                                            {
                                                @ObtenerValorCelda(item, column)
                                            }
                                            else
                                            {
                                                <div class="relative">
                                                    <InputDinamico TItem="TItem"
                                                                   Item="item"
                                                                   Accesor="@column.Accesor"
                                                                   TipoInput="@column.TipoInput"
                                                                   OpcionesSelect="@column.OpcionesSelect"
                                                                   Min="@column.Min"
                                                                   Max="@column.Max"
                                                                   Step="@column.Step"
                                                                   TieneError="@TieneErrorValidacion(item, column.Accesor)"
                                                                   MensajeError="@ObtenerMensajeError(item, column.Accesor)"
                                                                   OnInputChange="@((tuple) => RegistrarCambioInput(item, tuple.Accesor, tuple.Valor))" />
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            @ObtenerValorCelda(item, column)
                                        }
                                    </td>
                                }
                            }
                        </tr>
                        @if (FilaExpandida != null && FilasExpandidas.ContainsKey(rowId) && FilasExpandidas[rowId])
                        {
                            <tr class="border-b">
                                <td colspan="@ObtenerCantidadColumnas()" class="p-4 text-left bg-[var(--bg)] relative">
                                    <div class="absolute left-4 top-0 bottom-0 w-0.5 bg-[var(--border)]"></div>
                                    <div class="ml-8">
                                        @FilaExpandida(item)
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>

    <Paginacion IndicePagina="@IndicePagina"
                IndicePaginaChanged="@IrPagina"
                TamanoPagina="@TamanoPagina"
                TamanoPaginaChanged="@CambiarTamanoPagina"
                TotalElementos="@TotalElementos"
                PaginasAMostrar="@PaginasAMostrar"
                EsMovil="@EsMovil"
                OnAccionIniciada="@((bool e) => IniciarAccion("cambio-pagina"))"
                OnAccionFinalizada="@((bool e) => FinalizarAccion())" />


    <!--Modal confirmar Eliminar-->
    @if (DatosSuperpuestos != null && PosicionSuperpuesta != null)
    {
        <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
            <div class="bg-[var(--bg)] border border-[var(--border)] rounded-lg shadow-lg p-6 w-[90%] sm:w-[400px] max-w-full">
                <div class="flex items-center space-x-2">
                    <i class="fas fa-exclamation-triangle text-[var(--error)] text-2xl"></i>
                    <p class="text-md text-[var(--font)]">¿Estás seguro de eliminar el elemento seleccionado?</p>
                </div>

                <div class="flex flex-wrap justify-end space-x-2 sm:space-x-4 mt-6">
                    <button type="button" @onclick="ConfirmarEliminar" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                        Sí
                    </button>
                    <button type="button" @onclick="CancelarEliminar" class="px-4 py-2 border border-[var(--border)] text-[var(--font)] rounded">
                        No
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Mass delete confirmation modal -->
    @if (MostrarConfirmacionEliminarMasivo)
    {
        <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
            <div class="bg-[var(--bg)] border border-[var(--border)] rounded-lg shadow-lg p-6 w-[90%] sm:w-[400px] max-w-full">
                <div class="flex items-center space-x-2">
                    <i class="fas fa-exclamation-triangle text-[var(--error)] text-2xl"></i>
                    <p class="text-md text-[var(--font)]">¿Estás seguro de eliminar los elementos seleccionados?</p>
                </div>

                <div class="flex flex-wrap justify-end space-x-2 sm:space-x-4 mt-6">
                    <button type="button" @onclick="ConfirmarEliminarMasivo" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                        Sí
                    </button>
                    <button type="button" @onclick="() => MostrarConfirmacionEliminarMasivo = false" class="px-4 py-2 border border-[var(--border)] text-[var(--font)] rounded">
                        No
                    </button>
                </div>
            </div>
        </div>
    }
</div>
